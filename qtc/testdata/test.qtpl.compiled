// This file is automatically generated by qtc from "test.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line testdata/test.qtpl:1
package testdata

//line testdata/test.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

// This is a test template file.
// All the lines outside func and code are just comments.
//
// Optional imports must be at the top of template

//line testdata/test.qtpl:5
import (
	"fmt"
	"strconv"
)

// Arbitrary go code may be inserted here. For instance, type definition:

//line testdata/test.qtpl:12
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line testdata/test.qtpl:13
type FooArgs struct {
	S string
	N int
}

// Now define an exported function template

//line testdata/test.qtpl:20
func StreamFoo(qw *qt422016.Writer, a []FooArgs) {
	//line testdata/test.qtpl:20
	qw.N().S(`
	<h1>Hello, I'm Foo!</h1>
	<div>
		My args are:
		`)
	//line testdata/test.qtpl:24
	if len(a) == 0 {
		//line testdata/test.qtpl:24
		qw.N().S(`
			no args!
		`)
		//line testdata/test.qtpl:26
	} else if len(a) == 1 {
		//line testdata/test.qtpl:26
		qw.N().S(`
			a single arg: `)
		//line testdata/test.qtpl:27
		streamprintArgs(qw, 0, &a[0])
		//line testdata/test.qtpl:27
		qw.N().S(`
		`)
		//line testdata/test.qtpl:28
	} else {
		//line testdata/test.qtpl:28
		qw.N().S(`
			<ul>
			`)
		//line testdata/test.qtpl:30
		for i, aa := range a {
			//line testdata/test.qtpl:30
			qw.N().S(`
				`)
			//line testdata/test.qtpl:31
			if i >= 42 {
				//line testdata/test.qtpl:31
				qw.N().S(`
					There are other args, but only the first 42 of them are shown
					`)
				//line testdata/test.qtpl:33
				break
				//line testdata/test.qtpl:35
			}
			//line testdata/test.qtpl:35
			qw.N().S(`
				`)
			//line testdata/test.qtpl:36
			streamprintArgs(qw, i, &aa)
			//line testdata/test.qtpl:36
			qw.N().S(`
				Arbitrary Go code may be inserted here: `)
			//line testdata/test.qtpl:37
			str := strconv.Itoa(i + 42)

			//line testdata/test.qtpl:37
			qw.N().S(`
				str = `)
			//line testdata/test.qtpl:38
			qw.E().S(fmt.Sprintf("this html will be escaped <b>%s</b>", str))
			//line testdata/test.qtpl:38
			qw.N().S(`
			`)
			//line testdata/test.qtpl:39
		}
		//line testdata/test.qtpl:39
		qw.N().S(`
			</ul>
		`)
		//line testdata/test.qtpl:41
	}
	//line testdata/test.qtpl:41
	qw.N().S(`
	</div>
	`)
	//line testdata/test.qtpl:43
	qw.N().S(`
		Arbitrary tags are treated as plaintext inside plain.
		For instance, {% foo %} {% bar %} {% for %}
		{% func %} {% code %} {% return %} {% break %} {% comment %}
		and even {% unclosed tag
	`)
	//line testdata/test.qtpl:48
	qw.N().S(`
	`)
	//line testdata/test.qtpl:49
	qw.N().S(`Leading and trailing space between lines and tags is collapsed inside collapsespace unless `)
	//line testdata/test.qtpl:51
	qw.N().S(` `)
	//line testdata/test.qtpl:51
	qw.N().S(`or `)
	//line testdata/test.qtpl:51
	qw.N().S(`
`)
	//line testdata/test.qtpl:51
	qw.N().S(`is used `)
	//line testdata/test.qtpl:52
	qw.N().S(`
	`)
	//line testdata/test.qtpl:53
	qw.N().S(`Leading and trailing space between lines and tags is completelyremoved unless`)
	//line testdata/test.qtpl:55
	qw.N().S(` `)
	//line testdata/test.qtpl:55
	qw.N().S(`or`)
	//line testdata/test.qtpl:55
	qw.N().S(`
`)
	//line testdata/test.qtpl:55
	qw.N().S(`is used`)
	//line testdata/test.qtpl:56
	qw.N().S(`
`)
//line testdata/test.qtpl:57
}

//line testdata/test.qtpl:57
func WriteFoo(qww qtio422016.Writer, a []FooArgs) {
	//line testdata/test.qtpl:57
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:57
	StreamFoo(qw, a)
	//line testdata/test.qtpl:57
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:57
}

//line testdata/test.qtpl:57
func Foo(a []FooArgs) string {
	//line testdata/test.qtpl:57
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:57
	WriteFoo(qb, a)
	//line testdata/test.qtpl:57
	qs := string(qb.B)
	//line testdata/test.qtpl:57
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:57
	return qs
//line testdata/test.qtpl:57
}

// Now define private printArgs, which is used in Foo via {%= %} tag

//line testdata/test.qtpl:62
func streamprintArgs(qw *qt422016.Writer, i int, a *FooArgs) {
	//line testdata/test.qtpl:62
	qw.N().S(`
	`)
	//line testdata/test.qtpl:63
	if i == 0 {
		//line testdata/test.qtpl:63
		qw.N().S(`
		Hide args for i = 0
		`)
		//line testdata/test.qtpl:65
		return
		//line testdata/test.qtpl:69
	}
	//line testdata/test.qtpl:69
	qw.N().S(`
	<li>
		a[`)
	//line testdata/test.qtpl:71
	qw.N().D(i)
	//line testdata/test.qtpl:71
	qw.N().S(`] = {S: `)
	//line testdata/test.qtpl:71
	qw.E().Q(a.S)
	//line testdata/test.qtpl:71
	qw.N().S(`, N: `)
	//line testdata/test.qtpl:71
	qw.N().D(a.N)
	//line testdata/test.qtpl:71
	qw.N().S(`}<br>
		alert("foo `)
	//line testdata/test.qtpl:72
	qw.E().J("bar\naaa")
	//line testdata/test.qtpl:72
	qw.N().S(` baz")<br/>
		<a href="?`)
	//line testdata/test.qtpl:73
	qw.N().U("аргумент 1")
	//line testdata/test.qtpl:73
	qw.N().S(`=`)
	//line testdata/test.qtpl:73
	qw.N().U("значение=&1")
	//line testdata/test.qtpl:73
	qw.N().S(`">test</a>
	</li>
`)
//line testdata/test.qtpl:75
}

//line testdata/test.qtpl:75
func writeprintArgs(qww qtio422016.Writer, i int, a *FooArgs) {
	//line testdata/test.qtpl:75
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:75
	streamprintArgs(qw, i, a)
	//line testdata/test.qtpl:75
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:75
}

//line testdata/test.qtpl:75
func printArgs(i int, a *FooArgs) string {
	//line testdata/test.qtpl:75
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:75
	writeprintArgs(qb, i, a)
	//line testdata/test.qtpl:75
	qs := string(qb.B)
	//line testdata/test.qtpl:75
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:75
	return qs
//line testdata/test.qtpl:75
}

// Now create page template interface.

//line testdata/test.qtpl:79
type Page interface {
	//line testdata/test.qtpl:79
	Head() string
	//line testdata/test.qtpl:79
	StreamHead(qw *qt422016.Writer)
	//line testdata/test.qtpl:79
	WriteHead(qww qtio422016.Writer)
	//line testdata/test.qtpl:79
	Body(title string) string
	//line testdata/test.qtpl:79
	StreamBody(qw *qt422016.Writer, title string)
	//line testdata/test.qtpl:79
	WriteBody(qww qtio422016.Writer, title string)
//line testdata/test.qtpl:79
}

// This function prints arbitrary page.

//line testdata/test.qtpl:89
func StreamPrintPage(qw *qt422016.Writer, p Page, title string) {
	//line testdata/test.qtpl:89
	qw.N().S(`
	<html>
		<head>`)
	//line testdata/test.qtpl:91
	p.StreamHead(qw)
	//line testdata/test.qtpl:91
	qw.N().S(`</head>
		<body>`)
	//line testdata/test.qtpl:92
	p.StreamBody(qw, title)
	//line testdata/test.qtpl:92
	qw.N().S(`</body>
	</html>
`)
//line testdata/test.qtpl:94
}

//line testdata/test.qtpl:94
func WritePrintPage(qww qtio422016.Writer, p Page, title string) {
	//line testdata/test.qtpl:94
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:94
	StreamPrintPage(qw, p, title)
	//line testdata/test.qtpl:94
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:94
}

//line testdata/test.qtpl:94
func PrintPage(p Page, title string) string {
	//line testdata/test.qtpl:94
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:94
	WritePrintPage(qb, p, title)
	//line testdata/test.qtpl:94
	qs := string(qb.B)
	//line testdata/test.qtpl:94
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:94
	return qs
//line testdata/test.qtpl:94
}

// Implement contacts page

//line testdata/test.qtpl:97
type ContactsPage struct{}

//line testdata/test.qtpl:98
func (b *ContactsPage) StreamHead(qw *qt422016.Writer) {
//line testdata/test.qtpl:98
qw.N().S(`<title>Contacts!</title>`) }

//line testdata/test.qtpl:98
//line testdata/test.qtpl:98
func (b *ContactsPage) WriteHead(qww qtio422016.Writer) {
	//line testdata/test.qtpl:98
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:98
	b.StreamHead(qw)
	//line testdata/test.qtpl:98
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:98
}

//line testdata/test.qtpl:98
func (b *ContactsPage) Head() string {
	//line testdata/test.qtpl:98
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:98
	b.WriteHead(qb)
	//line testdata/test.qtpl:98
	qs := string(qb.B)
	//line testdata/test.qtpl:98
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:98
	return qs
//line testdata/test.qtpl:98
}

//line testdata/test.qtpl:99
func (b *ContactsPage) StreamBody(qw *qt422016.Writer, title string) {
	//line testdata/test.qtpl:99
	qw.N().S(`Put here contact info`)
//line testdata/test.qtpl:99
}

//line testdata/test.qtpl:99
func (b *ContactsPage) WriteBody(qww qtio422016.Writer, title string) {
	//line testdata/test.qtpl:99
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:99
	b.StreamBody(qw, title)
	//line testdata/test.qtpl:99
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:99
}

//line testdata/test.qtpl:99
func (b *ContactsPage) Body(title string) string {
	//line testdata/test.qtpl:99
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:99
	b.WriteBody(qb, title)
	//line testdata/test.qtpl:99
	qs := string(qb.B)
	//line testdata/test.qtpl:99
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:99
	return qs
//line testdata/test.qtpl:99
}

// Implement HomePage

//line testdata/test.qtpl:102
type Homepage struct{}

//line testdata/test.qtpl:103
func (h *Homepage) StreamHead(qw *qt422016.Writer) {
//line testdata/test.qtpl:103
qw.N().S(`<title>Homepage</title>`) }

//line testdata/test.qtpl:103
//line testdata/test.qtpl:103
func (h *Homepage) WriteHead(qww qtio422016.Writer) {
	//line testdata/test.qtpl:103
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:103
	h.StreamHead(qw)
	//line testdata/test.qtpl:103
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:103
}

//line testdata/test.qtpl:103
func (h *Homepage) Head() string {
	//line testdata/test.qtpl:103
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:103
	h.WriteHead(qb)
	//line testdata/test.qtpl:103
	qs := string(qb.B)
	//line testdata/test.qtpl:103
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:103
	return qs
//line testdata/test.qtpl:103
}

//line testdata/test.qtpl:104
func (h *Homepage) StreamBody(qw *qt422016.Writer, title string) {
	//line testdata/test.qtpl:104
	qw.N().S(`
	Title: `)
	//line testdata/test.qtpl:105
	qw.N().S(title)
	//line testdata/test.qtpl:105
	qw.N().S(`
	Homepage body
`)
//line testdata/test.qtpl:107
}

//line testdata/test.qtpl:107
func (h *Homepage) WriteBody(qww qtio422016.Writer, title string) {
	//line testdata/test.qtpl:107
	qw := qt422016.AcquireWriter(qww)
	//line testdata/test.qtpl:107
	h.StreamBody(qw, title)
	//line testdata/test.qtpl:107
	qt422016.ReleaseWriter(qw)
//line testdata/test.qtpl:107
}

//line testdata/test.qtpl:107
func (h *Homepage) Body(title string) string {
	//line testdata/test.qtpl:107
	qb := qt422016.AcquireByteBuffer()
	//line testdata/test.qtpl:107
	h.WriteBody(qb, title)
	//line testdata/test.qtpl:107
	qs := string(qb.B)
	//line testdata/test.qtpl:107
	qt422016.ReleaseByteBuffer(qb)
	//line testdata/test.qtpl:107
	return qs
//line testdata/test.qtpl:107
}

// unused code may be commented:
